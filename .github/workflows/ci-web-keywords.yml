name: Run Web keywords
on: 
  push:
    branches:
    - develop
  workflow_dispatch:
    inputs:
      krebuild:
        description: 'build KRE for testing'
        required: true
        default: '9.6.0'
        type: string
      runon:
        description: 'run on machine'
        required: true
        default: 'macos-latest'
        type: choice
        options:
          - macos-latest
          - macos-13
          - windows-latest
          - ubuntu-latest
      configfile:
        description: 'Execution Profile'
        required: true
        default: 'default'
        type: choice
        options:
          - default
          - chrome profile
          - edge chromium profile
          - firefox headless profile
          - firefox profile
      testsuite:
        description: 'Test suite or test suite collection'
        required: true
        default: TS-WebUI Keywords Test
        type: choice
        options:
          - TS-Keywords Sanity Check
          - TS-WebUI Keywords Test
          - TS-Cucumber Keywords Test
          - TS-Web Service Keywords Test
          - TS-WebUI Keywords Test - docker
          - TSC-Keywords Sanity Check
          - TSC-WebUI - 3 Parallels
          - TSC-WebUI - 6 TS - 3 Parallels
          - TSC-Docker - 5 TS - 5 Parallels

      testsuiteCollection:
        description: 'Run TestsuiteCollection'
        required: false
        type: boolean
      overrideBrowser:
        description: 'Override Browser Option'
        required: false
        type: boolean
      browser:
        description: 'Browser'
        required: true
        default: Chrome
        type: choice
        options:
          - Chrome
          - Firefox
          - Safari
          - Edge Chromium
          - Chrome (headless)
          - Firefox (headless)
env:
   version: 9.3.0
jobs:
  manual-trigger-mac:
    name: Run Web keywords on ${{ github.event.inputs.runon }} by manual trigger
    runs-on: ${{ github.event.inputs.runon }}
    if: ${{ github.event_name == 'workflow_dispatch' && startsWith(github.event.inputs.runon,'macos') }}
    env:
      version: ${{ github.event.inputs.krebuild }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3 

    - name: install firefox
      run: |
        brew update
        brew install --cask firefox

    - name: install microsoft-edge
      run: |
        brew update
        brew install --cask microsoft-edge
        
    - name: Download KRE
      run: |
        set -ex
        arrBuildNumber=(${version//-/ })
        versionNumber=${arrBuildNumber[0]}
        echo $versionNumber   
        curl "https://download.katalon.com/$version/Katalon_Studio_Engine_MacOS-$versionNumber.tar.gz" -o "Katalon_Studio_Engine.tar.gz"
    - name: Decompressing KRE 
      run: |
        tar -xvf Katalon_Studio_Engine.tar.gz
        rm Katalon_Studio_Engine.tar.gz
    - name: Running test cases on ${{ github.event.inputs.browser }}
      run: |
        set -ex
        arrBuildNumber=(${version//-/ })
        versionNumber=${arrBuildNumber[0]}
        echo $versionNumber   
        projectPath='${{ github.workspace }}'
        argSuite='testSuitePath'
        argBrowser='-browserType=${{ github.event.inputs.browser }}'
        argProfile='-executionProfile=${{ github.event.inputs.configfile }}'
        if [ ${{github.event.inputs.testsuiteCollection}} == true ];then argSuite='testSuiteCollectionPath'; if [ ${{github.event.inputs.overrideBrowser}} == false ]; then argBrowser=''; argProfile='';  fi;  fi;
        "Katalon_Studio_Engine_MacOS-$versionNumber/Katalon Studio Engine.app/Contents/MacOS/katalonc" -projectPath="$projectPath" -"$argSuite"="Test Suites/${{ github.event.inputs.testsuite }}" -apiKey=${{ secrets.API_KEY }} -orgID=${{ secrets.ORG_ID }} -testOpsProjectId=${{ secrets.PROJECT_ID }} "$argBrowser" "$argProfile" --config -webui.autoUpdateDrivers=true
  manual-trigger-window:
    name: Run Web keywords on ${{ github.event.inputs.runon }} by manual trigger
    runs-on: ${{ github.event.inputs.runon }}
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.runon == 'windows-latest'}}
    env:
      version: ${{ github.event.inputs.krebuild }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Change Screen Resolution
      shell: pwsh
      run: |
        Set-DisplayResolution -Width 1920 -Height 1080 -Force
    - name: Parse version
      id: parse-version
      run: |
        $envVesrion = "${{ env.version }}"
        $versionArray =$envVesrion.Split("-")
        $version = $versionArray[0]
        $argSuite="-testSuitePath"
        $argBrowser=' -browserType="${{ github.event.inputs.browser }}" -executionProfile="${{ github.event.inputs.configfile }}"'
        if ('${{github.event.inputs.testsuiteCollection}}' -eq 'true'){
          $argSuite='-testSuiteCollectionPath'
          if ( '${{github.event.inputs.overrideBrowser}}' -eq 'false')
          {
            $argBrowser=''
          } 
        }  
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "argBrowser=$argBrowser" >> $env:GITHUB_OUTPUT
        echo "argSuite=$argSuite" >> $env:GITHUB_OUTPUT
    - name: Download KRE
      uses: suisei-cn/actions-download-file@v1.3.0
      id: downloadfile  # Remember to give an ID if you need the output filename
      with:
        url: "https://download.katalon.com/${{ env.version }}/Katalon_Studio_Engine_Windows_64-${{ steps.parse-version.outputs.version }}.zip"
        target: C:/Users/public
    - name: Decompressing KRE 
      run: |
        Expand-Archive -LiteralPath "C:/Users/public/Katalon_Studio_Engine_Windows_64-${{  steps.parse-version.outputs.version }}.zip" -DestinationPath "C:/Users/public/katalon"
        rm "C:/Users/public/Katalon_Studio_Engine_Windows_64-${{  steps.parse-version.outputs.version }}.zip"
    - name: Running test cases om chrome
      shell: cmd
      run: |
        C:/Users/public/katalon/Katalon_Studio_Engine_Windows_64-${{  steps.parse-version.outputs.version }}/katalonc.exe -noSplash -runMode=console -projectPath="${{ github.workspace }}" ${{  steps.parse-version.outputs.argSuite }}="Test Suites/${{ github.event.inputs.testsuite }}" -apiKey=${{ secrets.API_KEY }} -orgID=${{ secrets.ORG_ID }}${{  steps.parse-version.outputs.argBrowser }} --config -webui.autoUpdateDrivers=true
  manual-trigger-ubuntu:
    name: Run Web keywords on ${{ github.event.inputs.runon }} by manual trigger
    runs-on: ${{ github.event.inputs.runon }}
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.runon =='ubuntu-latest' }}
    env:
      version: ${{ github.event.inputs.krebuild }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3 
    
    - name: Parse version
      id: parse-version
      shell: pwsh
      run: |
        $envVesrion = "${{ env.version }}"
        $versionArray =$envVesrion.Split("-")
        $version = $versionArray[0]
        $arrNumber = $version.Split(".")
        $javaVersion = "8"
        if ($arrNumber[0] -gt "8"){
          $javaVersion="17"
        }
        $argSuite="-testSuitePath"
        $argBrowser=' -browserType="${{ github.event.inputs.browser }}" -executionProfile="${{ github.event.inputs.configfile }}"'
        if ('${{github.event.inputs.testsuiteCollection}}' -eq 'true'){
          $argSuite='-testSuiteCollectionPath'
          if ( '${{github.event.inputs.overrideBrowser}}' -eq 'false')
          {
            $argBrowser=''
          }
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "javaVersion=$javaVersion" >> $env:GITHUB_OUTPUT
        echo "argBrowser=$argBrowser" >> $env:GITHUB_OUTPUT
        echo "argSuite=$argSuite" >> $env:GITHUB_OUTPUT
    - name: Install Zulu SDK    
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '${{ steps.parse-version.outputs.javaVersion }}'  

    - uses: suisei-cn/actions-download-file@v1.3.0           
      name: Download KRE
      with:
        url: "https://download.katalon.com/${{ env.version }}/Katalon_Studio_Engine_Linux_64-${{ steps.parse-version.outputs.version }}.tar.gz"
        filename: "krelinux.tar.gz" 
    - name: Extract files
      uses: a7ul/tar-action@v1.1.3
      id: extract
      with:
        command: x
        files: krelinux.tar.gz

    - name: Running test cases on ${{ github.event.inputs.browser }}
      run: |
        export projectPath="$PWD"/web-keywords-automation.prj
        cd ./Katalon_Studio_Engine_Linux_64-${{ steps.parse-version.outputs.version}}
        ./katalonc -noSplash -runMode=console -apiKey=${{ secrets.API_KEY }} -projectPath="$projectPath" ${{ steps.parse-version.outputs.argSuite}}="Test Suites/${{ github.event.inputs.testsuite }}" -orgID=${{ secrets.ORG_ID }} -testOpsProjectId=${{ secrets.PROJECT_ID }}${{ steps.parse-version.outputs.argBrowser}} --config -webui.autoUpdateDrivers=true
    
  
  macos:
    name: Run Web keywords on Mac
    if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    # - name: Katalon Studio Github Action
    #   uses: katalon-studio/katalon-studio-github-action@v2.2
    #   with:
    #       version: '8.6.5'
    #       projectPath: '${{ github.workspace }}'
    #       args: '-noSplash -retry=0 -testSuitePath="Test Suites/demoTest" -browserType="Chrome" -executionProfile="default" -apiKey= ${{ secrets.API_KEY }} -orgID=${{ secrets.ORG_ID }} -testOpsProjectId=${{ secrets.PROJECT_ID }} --config -webui.autoUpdateDrivers=true'   
    #- name: Download KSE
    #  run: |
    #    set -ex 
    #    curl "https://download.katalon.com/8.6.0/Katalon%20Studio.app.zip"  -o "katalon.zip"
    #    unzip katalon.zip
    #    rm katalon.zip
      
    - name: Download KRE
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        set -ex
        curl "https://download.katalon.com/$version/Katalon_Studio_Engine_MacOS-$version.tar.gz" -o "Katalon_Studio_Engine.tar.gz"
    - name: Decompressing KRE 
      run: |
        tar -xvf Katalon_Studio_Engine.tar.gz
        rm Katalon_Studio_Engine.tar.gz
    - name: Running test cases om chrome
      run: |
        set -ex
        projectPath='${{ github.workspace }}'
        "Katalon_Studio_Engine_MacOS-$version/Katalon Studio Engine.app/Contents/MacOS/katalonc" -apiKey=${{ secrets.API_KEY }} -orgID=${{ secrets.ORG_ID }} -projectPath="$projectPath" -testSuitePath="Test Suites/${{vars.TEST_SUITE}}" -browserType="Chrome" --config -webui.autoUpdateDrivers=true
  windows:
    name: Run Web keywords on windows
    if: ${{ github.event_name != 'workflow_dispatch' }}
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Download KRE
      uses: suisei-cn/actions-download-file@v1.3.0
      id: downloadfile  # Remember to give an ID if you need the output filename
      with:
        url: "https://download.katalon.com/${{ env.version }}/Katalon_Studio_Engine_Windows_64-${{ env.version }}.zip"
        target: C:/Users/public
    - name: Decompressing KRE 
      run: |
        Expand-Archive -LiteralPath "C:/Users/public/Katalon_Studio_Engine_Windows_64-${{ env.version }}.zip" -DestinationPath "C:/Users/public/katalon"
        rm "C:/Users/public/Katalon_Studio_Engine_Windows_64-${{ env.version }}.zip"
    - name: Running test cases om chrome
      shell: cmd
      run: |
        C:/Users/public/katalon/Katalon_Studio_Engine_Windows_64-${{ env.version }}/katalonc.exe -noSplash -runMode=console -projectPath="${{ github.workspace }}" -testSuitePath="Test Suites/${{ vars.TEST_SUITE }}" -apiKey=${{ secrets.API_KEY }} -orgID=${{ secrets.ORG_ID }} -browserType="Chrome" --config -webui.autoUpdateDrivers=true
  sendSlack:
    if: ${{vars.SEND_SLACK == 'true'}}
    needs: [manual-trigger-mac,manual-trigger-window,manual-trigger-ubuntu,macos,windows]
    name: Send Slack Message After Test
    runs-on: windows-latest
    steps:
    - name: Send Github APIs to get info
      id: get-github-info
      run: |
        $headers = @{
            Accept = "application/vnd.github+json"
            Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"
            'X-GitHub-Api-Version' = "2022-11-28"
        }
        
        $param = @{
            Uri         = "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            Method      = "Get"  
            Headers     = $headers
        }

        $run = Invoke-RestMethod @param

        $jobsUrl= $run.jobs_url

        $param = @{
            Uri         = "$jobsUrl"
            Method      = "Get"  
            Headers      =  $headers
        }

        $job = Invoke-RestMethod @param
        $jobs = $job.jobs
        $jobrun = $jobs | Where-Object {$_.conclusion -ne "skipped" -And $_.name -ne "Send Slack Message After Test" } | Select-Object conclusion,id,name,url
        $i=0
        $jobrun |ForEach-Object {
          $i++
          $id=$_.id
          $jobname=$_.name
          $param = @{
            Uri         = "https://api.github.com/repos/${{ github.repository }}/actions/jobs/$id/logs"
            Method      = "Get"  
            Headers      =  $headers
          }

          $log = Invoke-RestMethod @param
          
          echo "name$i=$jobname" >> $env:GITHUB_OUTPUT
          echo "log$i<<EOF" >> $env:GITHUB_OUTPUT
          echo "$log" >> $env:GITHUB_OUTPUT
          echo "EOF" >> $env:GITHUB_OUTPUT
        }
        echo "totalJobs=$jobrun.Length" >> $env:GITHUB_OUTPUT

    - name: Extract TestOps URL
      id: extract-testops-url
      run: |
        @"
        ${{ steps.get-github-info.outputs.log1 }}
        "@ -match ".*Katalon TestOps - Execution URL: (?<content>.*).*"
        $testOpsUrl = $matches['content'].replace("`r", "").replace("`n", "").replace("projectId=***", "projectId=${{ secrets.PROJECT_ID }}")

        echo "testOpsUrl=$testOpsUrl" >> $env:GITHUB_OUTPUT

    - name: Find Owner Slack Id
      id: find-owner-slack-id
      if: ${{ always() }}
      run: |
        function Find-Slack-Id {
          param (
            $Name,
            $SlackUsers
          )

          foreach ($element in $SlackUsers) {
            if ($Name -eq $element.gitHubName) {
              return "<@" + $element.slackUserId + ">"
            }
          }

          return $Name
        }

        $users = @"
        ${{ vars.KATALON_USERS }}
        "@ | ConvertFrom-Json
        $owner = Find-Slack-Id -Name "${{ github.actor }}" -SlackUsers $users
        
        echo "owner=$owner" >> $env:GITHUB_OUTPUT

    - name: Extract Failed Tests
      id: extract-failed-tests
      if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
      run: |
        $jobname= "${{ steps.get-github-info.outputs.name1 }}"
        $failedTests = @"
        ${{ steps.get-github-info.outputs.log1 }}
        "@  | Select-String -Pattern ".*TestCaseExecutor.*Test Cases/(.*?) FAILED.*" -AllMatches | ForEach-Object {$_.matches} | ForEach-Object {$_.Groups[1].Value}
        $failedTests = $failedTests | select -Unique
        $result = foreach ($element in $failedTests) { 
          $testName = $element.Split("/")[-1] 
          "- " + $testName + "\n"
        }
        $finalResult = "•" + $jobname +"\n" + $result
        # $finalResult = $finalResult.replace(' >','>')
        echo "failedTests=$finalResult" >> $env:GITHUB_OUTPUT

    - name: 'Slack Test Failed Notification'
      if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
      uses: slackapi/slack-github-action@v1.16.0
      with:
          payload: "{
            \"blocks\": [
              {
                \"type\": \"context\",
                \"elements\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"Hi ${{ steps.find-owner-slack-id.outputs.owner }}:bongo_blob:,\"
                  }
                ]
              },
              {
                \"type\": \"header\",
                \"text\": {
                  \"type\": \"plain_text\",
                  \"text\": \":katalon-new: Web keywords test has FAILED :no_entry:\",
                  \"emoji\": true
                }
              },
              {
                \"type\": \"divider\"
              },
              {
                \"type\": \"context\",
                \"elements\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \">From Branch: *${{ github.head_ref }}*  \\n>To Branch: *${{ github.ref_name }}* \\n>TestOps URL: ${{ steps.extract-testops-url.outputs.testOpsUrl }} \\n>Build URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }
                ]
              },
              {
                \"type\": \"header\",
                \"text\": {
                  \"type\": \"plain_text\",
                  \"text\": \":no_entry: FAILED Tests\",
                  \"emoji\": true
                }
              },
              {
                \"type\": \"divider\"
              },
              {
                \"type\": \"context\",
                \"elements\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"${{ steps.extract-failed-tests.outputs.failedTests }} \"
                  }
                ]
              },
              {
                \"type\": \"divider\"
              }
            ]
           }"
      env: 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_PERSONAL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

    - name: 'Slack Test Passed Notification'
      if: ${{ always() && !contains(join(needs.*.result, ','), 'failure') }}
      uses: slackapi/slack-github-action@v1.16.0
      with:
          payload: "{
            \"blocks\": [
              {
                \"type\": \"context\",
                \"elements\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \"Hi ${{ steps.find-owner-slack-id.outputs.owner }}:bongo_blob:,\"
                  }
                ]
              },
              {
                \"type\": \"header\",
                \"text\": {
                  \"type\": \"plain_text\",
                  \"text\": \":katalon-new: Web keywords test has successfully PASSED :white_check_mark:\",
                  \"emoji\": true
                }
              },
              {
                \"type\": \"divider\"
              },
              {
                \"type\": \"context\",
                \"elements\": [
                  {
                    \"type\": \"mrkdwn\",
                    \"text\": \">From Branch: *${{ github.head_ref }}*  \\n>To Branch: *${{ github.ref_name }}* \\n>TestOps URL: ${{ steps.extract-testops-url.outputs.testOpsUrl }} \\n>Build URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                  }
                ]
              },
              {
                \"type\": \"divider\"
              }
            ]
           }"
      env: 
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_PERSONAL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK  
       

